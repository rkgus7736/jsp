회원관리 수준의 프로젝트

기존 데이터가 될 테이블, 데이터는 제공해줌 (sql문으로)

1. 프로젝트 생성 후 git으로 형상관리 하는 부분(git init)
-->해당 프로젝트 폴더 안에 git init 등록
커밋 메세지 지정
git log로 결과를 캡쳐

MemberProject 프로젝트 내부에서 깃 명령을 사용하면 됨.(git log로 commit 메세지 나오게 해서 캡쳐하면 됨)
------------------------------------------------------------------------------------------------------------------------------------
2. DPCP 연동하는 부분

*JDBC & DBCP

JDBC: Java Data Base Connectivity, DB와 연결하는 Java 인터페이스

      1)DriverManger를 통한 DB Connection 객체 생성 

      2)Connection 객체에서 statement 객체 생성 및 쿼리 실행

      3)ResultSet 사용

      4)Coonection close



DBCP: DataBase Connection Pool, DB와 연결하고 있는 객체를 관리하기 위한 Connection Pool

      Connection pool에서 오픈된 Connection을 가지고 있다가 필요한 곳에 Connection을 할당 및 관리

      

*DB와 연결하기 위해서는 JDBC가 필요하고 DBCP는 Connection Pool을 이용해 효율성을 향상

------------------------------------------------------------------------------------------------------------------------------------

3. 로그인 처리하는 부분, 자바스크립트로 경고창 띄우는 부분 write.append("<script>alert("경고창")</script>);

	ModelAndView view = null;
		int count = QnAService.getInstance().insertQnA(new QnaDTO(title, content, writer));
 
		try {
			if (count == 0) {
				response.getWriter().append("<script>alert('문의 등록중 문제가 생각다.');" + "history.back();</script>");
			} else {
				view = new ModelAndView("qnaView.do", true);
			}
		} catch (IOException e) {
			e.printStackTrace();
		}

		return view;
	}

------------------------------------------------------------------------------------------------------------------------------------
4. 세션 정보로 페이지 제어
-->세션 정보에 따라서 페이지 이동,내용을 다르게 출력하는 부분


------------------------------------------------------------------------------------------------------------------------------------
5. 관리자가 회원 등록,검색,수정,삭제 (DB 이용하는거) --> 조건을 통해서 작업
------------------------------------------------------------------------------------------------------------------------------------
6. 배치 프로그램 작성, quartz , 적용시 크론식(페이지) 사용, 리스너 이용하여 웹서버 시작시 해당 배치 프로그램 실행되게
------------------------------------------------------------------------------------------------------------------------------------
7. 화면에 보여줄 view에는 굳이 css 적용안해도 됨, html만 사용해도 무방, JS/jQuery cdn 사용

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>

------------------------------------------------------------------------------------------------------------------------------------
8. 제출은 Export -> war file -> 하단의 Export Source File  꼭 체크한 후 Export하기(쌤이 볼수있게) -> 캡쳐한 그림파일과 압축해서 올림
------------------------------------------------------------------------------------------------------------------------------------
9. Ajax, Json 사용해도 상관없음
------------------------------------------------------------------------------------------------------------------------------------
10. <% %>,<%= %> 표현식,스크립트릿은 사용X,
------------------------------------------------------------------------------------------------------------------------------------
11. EL, 

JSTL <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>

사용 
------------------------------------------------------------------------------------------------------------------------------------
12. MVC 패턴 적용(Model-View-Controller)
, insert_process.jsp 사용 X, controller와 dispatcher servlet 사용
	VO, DTO, Service, DAO, Dispatcher Servlet, HandlerMapping, 싱글톤 패턴
------------------------------------------------------------------------------------------------------------------------------------
13. URL Mapping --> form action에 클래스 명이 아니라 .do 쓰는 것
------------------------------------------------------------------------------------------------------------------------------------
14. 뷰 스크린 샷 참고 (비슷하게 만들면 됨)
------------------------------------------------------------------------------------------------------------------------------------
15.프로젝트에 필요한 라이브러리 알아서 추가 (복붙)
------------------------------------------------------------------------------------------------------------------------------------
16. 프로젝트명은 주어진 프로젝트명으로 사용